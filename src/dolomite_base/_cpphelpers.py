# DO NOT MODIFY: this is automatically generated by the cpptypes

import os
import ctypes as ct

def catch_errors(f):
    def wrapper(*args):
        errcode = ct.c_int32(0)
        errmsg = ct.c_char_p(0)
        output = f(*args, ct.byref(errcode), ct.byref(errmsg))
        if errcode.value != 0:
            msg = errmsg.value.decode('ascii')
            lib.free_error_message(errmsg)
            raise RuntimeError(msg)
        return output
    return wrapper

# TODO: surely there's a better way than whatever this is.
dirname = os.path.dirname(os.path.abspath(__file__))
contents = os.listdir(dirname)
lib = None
for x in contents:
    if x.startswith('_core') and not x.endswith("py"):
        lib = ct.CDLL(os.path.join(dirname, x))
        break

if lib is None:
    raise ImportError("failed to find the _core.* module")

lib.free_error_message.argtypes = [ ct.POINTER(ct.c_char_p) ]

import numpy as np
def np2ct(x, expected, contiguous=True):
    if not isinstance(x, np.ndarray):
        raise ValueError('expected a NumPy array')
    if x.dtype != expected:
        raise ValueError('expected a NumPy array of type ' + str(expected) + ', got ' + str(x.dtype))
    if contiguous:
        if not x.flags.c_contiguous and not x.flags.f_contiguous:
            raise ValueError('only contiguous NumPy arrays are supported')
    return x.ctypes.data

lib.py_extract_r_missing_double.restype = None
lib.py_extract_r_missing_double.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_csv_booleans.restype = ct.c_uint8
lib.py_fetch_csv_booleans.argtypes = [
    ct.c_void_p,
    ct.c_int32,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_csv_numbers.restype = ct.c_uint8
lib.py_fetch_csv_numbers.argtypes = [
    ct.c_void_p,
    ct.c_int32,
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_fetch_csv_strings.restype = None
lib.py_fetch_csv_strings.argtypes = [
    ct.c_void_p,
    ct.c_int32,
    ct.c_char_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_free_csv.restype = None
lib.py_free_csv.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_get_csv_column_stats.restype = None
lib.py_get_csv_column_stats.argtypes = [
    ct.c_void_p,
    ct.c_int32,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_get_csv_num_fields.restype = ct.c_int32
lib.py_get_csv_num_fields.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_get_csv_num_records.restype = ct.c_int32
lib.py_get_csv_num_records.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_get_csv_string_stats.restype = ct.c_uint8
lib.py_get_csv_string_stats.argtypes = [
    ct.c_void_p,
    ct.c_int32,
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_load_csv.restype = ct.c_void_p
lib.py_load_csv.argtypes = [
    ct.c_char_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_load_list_hdf5.restype = ct.c_void_p
lib.py_load_list_hdf5.argtypes = [
    ct.c_char_p,
    ct.c_char_p,
    ct.c_int32,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_load_list_json.restype = ct.c_void_p
lib.py_load_list_json.argtypes = [
    ct.c_char_p,
    ct.c_int32,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_free_list.restype = None
lib.py_uzuki2_free_list.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_boolean_vector_length.restype = ct.c_int32
lib.py_uzuki2_get_boolean_vector_length.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_boolean_vector_mask.restype = None
lib.py_uzuki2_get_boolean_vector_mask.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_boolean_vector_values.restype = ct.c_uint8
lib.py_uzuki2_get_boolean_vector_values.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_external_index.restype = ct.c_int32
lib.py_uzuki2_get_external_index.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_integer_vector_length.restype = ct.c_int32
lib.py_uzuki2_get_integer_vector_length.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_integer_vector_mask.restype = None
lib.py_uzuki2_get_integer_vector_mask.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_integer_vector_values.restype = ct.c_uint8
lib.py_uzuki2_get_integer_vector_values.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_list_element.restype = ct.c_void_p
lib.py_uzuki2_get_list_element.argtypes = [
    ct.c_void_p,
    ct.c_int32,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_list_length.restype = ct.c_int32
lib.py_uzuki2_get_list_length.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_list_named.restype = ct.c_uint8
lib.py_uzuki2_get_list_named.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_list_names_contents.restype = None
lib.py_uzuki2_get_list_names_contents.argtypes = [
    ct.c_void_p,
    ct.c_char_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_list_names_lengths.restype = ct.c_uint64
lib.py_uzuki2_get_list_names_lengths.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_node_type.restype = ct.c_int32
lib.py_uzuki2_get_node_type.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_number_vector_length.restype = ct.c_int32
lib.py_uzuki2_get_number_vector_length.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_number_vector_mask.restype = None
lib.py_uzuki2_get_number_vector_mask.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_number_vector_values.restype = ct.c_uint8
lib.py_uzuki2_get_number_vector_values.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_parent_node.restype = ct.c_void_p
lib.py_uzuki2_get_parent_node.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_string_vector_contents.restype = ct.c_uint8
lib.py_uzuki2_get_string_vector_contents.argtypes = [
    ct.c_void_p,
    ct.c_char_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_string_vector_length.restype = ct.c_int32
lib.py_uzuki2_get_string_vector_length.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_string_vector_lengths.restype = ct.c_uint64
lib.py_uzuki2_get_string_vector_lengths.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_uzuki2_get_string_vector_mask.restype = None
lib.py_uzuki2_get_string_vector_mask.argtypes = [
    ct.c_void_p,
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_validate_csv.restype = None
lib.py_validate_csv.argtypes = [
    ct.c_char_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_validate_list_hdf5.restype = None
lib.py_validate_list_hdf5.argtypes = [
    ct.c_char_p,
    ct.c_char_p,
    ct.c_int32,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

lib.py_validate_list_json.restype = None
lib.py_validate_list_json.argtypes = [
    ct.c_char_p,
    ct.c_int32,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p)
]

def extract_r_missing_double(buffer):
    return catch_errors(lib.py_extract_r_missing_double)(np2ct(buffer, np.float64))

def fetch_csv_booleans(ptr, column, contents):
    return catch_errors(lib.py_fetch_csv_booleans)(ptr, column, np2ct(contents, np.uint8))

def fetch_csv_numbers(ptr, column, contents, mask):
    return catch_errors(lib.py_fetch_csv_numbers)(ptr, column, np2ct(contents, np.float64), np2ct(mask, np.uint8))

def fetch_csv_strings(ptr, column, contents):
    return catch_errors(lib.py_fetch_csv_strings)(ptr, column, contents)

def free_csv(ptr):
    return catch_errors(lib.py_free_csv)(ptr)

def get_csv_column_stats(ptr, column, type, size, loaded):
    return catch_errors(lib.py_get_csv_column_stats)(ptr, column, type, size, loaded)

def get_csv_num_fields(ptr):
    return catch_errors(lib.py_get_csv_num_fields)(ptr)

def get_csv_num_records(ptr):
    return catch_errors(lib.py_get_csv_num_records)(ptr)

def get_csv_string_stats(ptr, column, lengths, mask):
    return catch_errors(lib.py_get_csv_string_stats)(ptr, column, np2ct(lengths, np.int32), np2ct(mask, np.uint8))

def load_csv(path):
    return catch_errors(lib.py_load_csv)(path)

def load_list_hdf5(path, name, n):
    return catch_errors(lib.py_load_list_hdf5)(path, name, n)

def load_list_json(path, n):
    return catch_errors(lib.py_load_list_json)(path, n)

def uzuki2_free_list(ptr):
    return catch_errors(lib.py_uzuki2_free_list)(ptr)

def uzuki2_get_boolean_vector_length(ptr):
    return catch_errors(lib.py_uzuki2_get_boolean_vector_length)(ptr)

def uzuki2_get_boolean_vector_mask(ptr, mask):
    return catch_errors(lib.py_uzuki2_get_boolean_vector_mask)(ptr, np2ct(mask, np.uint8))

def uzuki2_get_boolean_vector_values(ptr, contents):
    return catch_errors(lib.py_uzuki2_get_boolean_vector_values)(ptr, np2ct(contents, np.uint8))

def uzuki2_get_external_index(ptr):
    return catch_errors(lib.py_uzuki2_get_external_index)(ptr)

def uzuki2_get_integer_vector_length(ptr):
    return catch_errors(lib.py_uzuki2_get_integer_vector_length)(ptr)

def uzuki2_get_integer_vector_mask(ptr, mask):
    return catch_errors(lib.py_uzuki2_get_integer_vector_mask)(ptr, np2ct(mask, np.uint8))

def uzuki2_get_integer_vector_values(ptr, contents):
    return catch_errors(lib.py_uzuki2_get_integer_vector_values)(ptr, np2ct(contents, np.int32))

def uzuki2_get_list_element(ptr, i):
    return catch_errors(lib.py_uzuki2_get_list_element)(ptr, i)

def uzuki2_get_list_length(ptr):
    return catch_errors(lib.py_uzuki2_get_list_length)(ptr)

def uzuki2_get_list_named(ptr):
    return catch_errors(lib.py_uzuki2_get_list_named)(ptr)

def uzuki2_get_list_names_contents(ptr, contents):
    return catch_errors(lib.py_uzuki2_get_list_names_contents)(ptr, contents)

def uzuki2_get_list_names_lengths(ptr, lengths):
    return catch_errors(lib.py_uzuki2_get_list_names_lengths)(ptr, np2ct(lengths, np.int32))

def uzuki2_get_node_type(ptr):
    return catch_errors(lib.py_uzuki2_get_node_type)(ptr)

def uzuki2_get_number_vector_length(ptr):
    return catch_errors(lib.py_uzuki2_get_number_vector_length)(ptr)

def uzuki2_get_number_vector_mask(ptr, mask):
    return catch_errors(lib.py_uzuki2_get_number_vector_mask)(ptr, np2ct(mask, np.uint8))

def uzuki2_get_number_vector_values(ptr, contents):
    return catch_errors(lib.py_uzuki2_get_number_vector_values)(ptr, np2ct(contents, np.float64))

def uzuki2_get_parent_node(ptr):
    return catch_errors(lib.py_uzuki2_get_parent_node)(ptr)

def uzuki2_get_string_vector_contents(ptr, contents):
    return catch_errors(lib.py_uzuki2_get_string_vector_contents)(ptr, contents)

def uzuki2_get_string_vector_length(ptr):
    return catch_errors(lib.py_uzuki2_get_string_vector_length)(ptr)

def uzuki2_get_string_vector_lengths(ptr, lengths):
    return catch_errors(lib.py_uzuki2_get_string_vector_lengths)(ptr, np2ct(lengths, np.int32))

def uzuki2_get_string_vector_mask(ptr, mask):
    return catch_errors(lib.py_uzuki2_get_string_vector_mask)(ptr, np2ct(mask, np.uint8))

def validate_csv(path):
    return catch_errors(lib.py_validate_csv)(path)

def validate_list_hdf5(path, name, n):
    return catch_errors(lib.py_validate_list_hdf5)(path, name, n)

def validate_list_json(path, n):
    return catch_errors(lib.py_validate_list_json)(path, n)